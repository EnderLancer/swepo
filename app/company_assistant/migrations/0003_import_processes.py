# Generated by Django 4.1.5 on 2023-10-15 13:23
import json

from django.db import migrations


def _import_processes_and_practices(apps, processes):
    ProcessCategory = apps.get_model("company_assistant", "ProcessCategory")
    SwdProcess = apps.get_model("company_assistant", "SwdProcess")
    ProcessPractice = apps.get_model("company_assistant", "ProcessPractice")
    categories = set()
    for process in processes.values():
        process_code = process["process_id"]
        category = process_code.split(".")[0]
        if category not in categories:
            categ, _ = ProcessCategory.objects.get_or_create(
                name = category,
                code = category,
                description = "No Description"
            )
            categories.add(category)
        defaults = {
            "description": process["purpose"]
        }
        process_obj, _ = SwdProcess.objects.update_or_create(
            name = process["name"],
            code = process_code,
            category = categ,
            defaults=defaults
        )
        for practice in process["practices"]:
            code, practice_all = practice.split(" ", 1)
            practice_name, description = practice_all.split(".", 1)
            ProcessPractice.objects.update_or_create(
                process=process_obj,
                name = practice_name,
                code = code,
                description = description
            )


def _import_specifics(apps, specifics):
    Specific = apps.get_model("company_assistant", "Specific")
    ProcessPractice = apps.get_model("company_assistant", "ProcessPractice")
    SpecificPracticeWeightRelation = apps.get_model("company_assistant", "SpecificPracticeWeightRelation")
    
    for specific in specifics.values():
        defaults = {
            "description": specific["description"]
        }
        specific_obj, _ = Specific.objects.update_or_create(
            name = specific["name"],
            defaults=defaults
        )

        for code, spec_practice in specific["practices"].items():
            practice = ProcessPractice.objects.get(code=code)
            SpecificPracticeWeightRelation.objects.update_or_create(
                practice=practice,
                specific = specific_obj,
                weight = spec_practice
            )



def import_processes(apps, schema_editor):
    processes = {}
    specifics = {}
    with open("../docs/res.json", "r") as processes_file:
        processes = json.load(processes_file)
    with open("../docs/specifics_test.json", "r") as specifics_file:
        specifics = json.load(specifics_file)

    _import_processes_and_practices(apps=apps, processes=processes)

    _import_specifics(apps=apps, specifics=specifics)


def reverse_import(apps, schema_editor):
    pass



class Migration(migrations.Migration):
    dependencies = [
        ('company_assistant', '0002_initial'),
    ]

    operations = [
        migrations.RunPython(
            code=import_processes,
            reverse_code=reverse_import
        )
    ]